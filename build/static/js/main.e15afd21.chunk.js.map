{"version":3,"sources":["components/Home.js","components/Instructions.js","components/Acknowledgements.js","firebase.js","components/Enter-username.js","components/Room.js","App.js","reportWebVitals.js","index.js"],"names":["Home","props","state","code","val","this","setState","target","value","className","href","to","type","onChange","handleChange","bind","style","textDecoration","React","Component","Instructions","width","fontSize","textAlign","margin","marginTop","marginLeft","marginRight","Acknowledgements","rel","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","rand","require","EnterUsername","hist","useHistory","roomId","url","window","location","pathname","length","substring","undefined","htmlFor","id","onClick","name","document","getElementById","innerHTML","test","games","database","ref","player","child","push","replace","generate","game","liar","players","stage","cards","true_deck","lie_deck","current_player","current_card","votes","true_count","lie_count","vote_result","turn_count","end_condition_count","round_count","info","set","all_questions","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","Room","voted","startGame","updateVoteTruth","updateVoteLie","restartGame","get","then","data","new_card_deck","new_card","shift","update","a","on","updatedPlayers","sort","new_questions","i","TRUTH_CARD_TOTAL_COUNT","selected_questions","c","cp","card","vr","tc","ecc","rc","new_true_deck","new_lie_deck","result","new_end_condition_count","new_round_count","new_turn_count","new_info","end_info","end_true_count","end_lie_count","u","t","l","k","answeringPlayer","map","hasEnoughPlayers","truthTellersAutoWin","currentQuestion","currentPlayer","currentPlayerIsLiar","cardInfo","roundCount","isViewingMode","renderPlayerList","renderWaitingRoom","renderMainGamePage","renderEndPage","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.e15afd21.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nclass Home extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            code: \"\"\n        }\n    }\n\n    handleChange(val){\n        this.setState({code: val.target.value})\n    }\n\n    render() {\n        return (\n            <div className='root'>\n                <div className='container'>\n                    <h1>🔥🔥🔥 Fire the Liar 🤥🤥🤥</h1>\n                    <h3 className='subheader'>A game of getting to know each other (or for some, <em>not</em> getting to know each other)!\n                        <br></br>\n                        <a href='https://docs.google.com/document/d/1tKZH9MmeWXQc_eNcoHw3SsS-xuUpcVUN5S6INx_17vs/edit?usp=sharing' target=\"_blank\">\n                            How to play &rarr;\n                        </a>\n                    </h3>\n                    <Link to='/enter'><button className='block'>create new room</button></Link>\n                    <input className='usernameInput' type='text' value={this.state.code} onChange={this.handleChange.bind(this)} />\n                    <Link to={'/enter/' + this.state.code} style={{ textDecoration: 'none' }}><button className='block'>enter with code</button></Link>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Home;\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction Instructions() {\n    return (\n        <div>\n            <h1>how to play</h1>\n            <p style={{ width: '75vw', fontSize: '1.5rem', textAlign: 'justify', margin: 'auto' }}>\n                one word is randomly chosen, and one player is randomly assigned as the \"liar\". all players are given the chosen word's category, and all but the liar are given the word.\n                the specific rules are up to you and your friends (e.g. # of turns), but a common way to play involves taking turns describing the word: non-liars try to provide enough\n                info to prove their innocence but not enough for the liar to guess the word, while the liar tries to fit in. at the end, everyone votes on who they think the liar is.<br /><br />\n                best played over video call! (may implement live chat in the future)\n            </p>\n            <Link to='/' style={{ textDecoration: 'none' }}><button className='block' style={{ marginTop: '30px', marginLeft: 'auto', marginRight: 'auto' }}>back</button></Link>\n        </div>\n    );\n}\n\nexport default Instructions;\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction Acknowledgements() {\n    return (\n        <div>\n            <h1>about / acknowledgements</h1>\n            <p style={{ width: '75vw', fontSize: '1.5rem', textAlign: 'justify', margin: 'auto' }}>\n                i didn't invent this game! i built it after watching{' '}\n                <a href='https://youtu.be/5MS3iaNmKQE?t=401' target='_blank' rel='noreferrer'>a video of red velvet playing it</a>.<br /><br />\n                i also followed a few very helpful tutorials along the way: <a href='https://css-tricks.com/intro-firebase-react/' target='_blank' rel='noreferrer'>this</a>, <a href='https://www.developintelligence.com/blog/2017/04/building-a-realtime-chess-game-with-react-and-firebase/' target='_blank' rel='noreferrer'>this</a>, <a href='https://medium.com/@hasangi/writing-deleting-and-updating-data-in-firebase-realtime-database-with-javascript-f26113ec8c93' target='_blank' rel='noreferrer'>this</a>, and <a href='https://css-tricks.com/building-a-real-time-chat-app-with-react-and-firebase/' target='_blank' rel='noreferrer'>this</a>.<br /><br />\n                styling for all buttons done with linus lee's <a href='https://thesephist.github.io/blocks.css/' target='_blank' rel='noreferrer'>blocks.css</a>, game room ids generated with <a href='https://www.npmjs.com/package/randomstring' target='_blank' rel='noreferrer'>node-randomstring</a>.<br /><br />\n                built with <a href='https://firebase.google.com/docs' target='_blank' rel='noreferrer'>firebase</a> and <a href='https://create-react-app.dev' target='_blank' rel='noreferrer'>react</a>. usernames are the only player-specific data stored in the database. i did not enable firebase's google analytics for this project.\n            </p>\n            <Link to='/' style={{ textDecoration: 'none' }}><button className='block' style={{ marginTop: '30px', marginLeft: 'auto', marginRight: 'auto' }}>back</button></Link>\n        </div>\n    );\n}\n\nexport default Acknowledgements;\n","import firebase from 'firebase'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCh8YuaMsuPOca-PX4FZxIq9VvrGY9jvX8\",\n  authDomain: \"cs247g-9d957.firebaseapp.com\",\n  projectId: \"cs247g-9d957\",\n  storageBucket: \"cs247g-9d957.appspot.com\",\n  messagingSenderId: \"943697705504\",\n  appId: \"1:943697705504:web:8dac44753753dba7405a45\",\n  measurementId: \"G-8872W6HKMJ\"\n};\n\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport firebase from '../firebase.js'\nvar rand = require('randomstring')\n\nfunction EnterUsername() {\n    const hist = useHistory()\n\n    function roomId() {\n        const url = window.location.pathname\n        return url.length > 6 ? url.substring(7, 14) : undefined\n    }\n\n    function Submit() {\n        const name = document.getElementById('username').value\n        // If username is empty or more than 40 characters\n        if (name.length > 40 || name.length === 0) {\n            document.getElementById('usernameValidationLabel').innerHTML = 'please enter between 1 and 40 characters'\n        }\n        // If contains non-alphanumeric\n        else if (/[^0-9A-Za-z]/.test(name)) {\n            document.getElementById('usernameValidationLabel').innerHTML = 'please enter alphanumeric only'\n        } else {\n            const id = roomId()\n            const games = firebase.database().ref('games')\n            // If URL doesn't have id, create room\n            if (!id) {\n                const id = rand.generate(7)\n                const cards = {\n                    true_deck: [\"\"],\n                    lie_deck:[\"\"]\n                }\n                const game = {\n                    liar: \"\",\n                    players: [\n                        name\n                    ],\n                    stage: 0,\n                    cards: cards,\n                    current_player: 0,\n                    current_card: {name: \"\", val: true},\n                    votes: {true_count: 0, lie_count:0},\n                    vote_result: \"\",\n                    turn_count: 0,\n                    end_condition_count: 0,\n                    round_count: 1,\n                    info: {true_count: 0, lie_count:0}\n                }\n                games.child(id).set(game)\n                hist.replace('/room/' + id + '&name=' + name)\n            }\n            // If URL has id, join existing room\n            else {\n                const player = document.getElementById('username').value\n                games.child(id).child('players').push(player)\n                hist.replace('/room/' + id + '&name=' + name)\n            }\n        }\n    }\n\n    function enterViewMode() {\n        // This should not collide with any usernames, as it is not alphanumeric.\n        hist.replace(`/room/${roomId()}&name=_`)\n    }\n\n    return (\n        <div className='root'>\n            <div className='container'>\n                <label className='usernameLabel' htmlFor='username'>username:</label> {/*check for uniqueness, or just add a number to the end if not unique*/}\n                <input className='usernameInput' type='text' id='username' />\n                <button className='block' onClick={Submit} style={{ marginLeft: 'auto', marginRight: 'auto' }}>enter</button>\n                <p className='usernameValidationLabel' id='usernameValidationLabel'>(alphanumeric only)</p>\n\n                {roomId() && <div>\n                    <button className='block' onClick={enterViewMode} style={{ marginLeft: 'auto', marginRight: 'auto' }}>use screen share mode</button>\n                    <p className='usernameValidationLabel' id='usernameValidationLabel'>Good for screen sharing on zoom! No secrets leaked here ;)</p>\n                </div>}\n            </div>\n        </div>\n    );\n}\n\nexport default EnterUsername;\n","import React from 'react'\nimport firebase from '../firebase.js'\n\n// Create wordsets\nconst all_questions = [\n\"What is one of your favorite life hacks?\",\n\"What television show or movie makes you laugh the hardest and why?\",\n\"Are you a cat person or dog person?\",\n\"Who do you most admire and why?\",\n\"Do you think you're courageous or timid? Why?\",\n\"Which is harder for you to give: time or money? Why?\",\n\"How old where you when you had your first kiss?\",\n\"What is the silliest thing you have done in front of an unfamiliar crowd?\",\n\"What is the class you got the worst grade in?\",\n\"Have you ever cheated on an exam or quiz? If so, what is the exam on?\",\n\"What is a secret you kept from your parents?\",\n\"Are you a morning person or a night person?\",\n\"How many selfies do you take a day?\",\n\"are you a coffee person or a tea person?\",\n\"describe your favorite childhood show\",\n\"What's the longest time you've ever gone without showering?\",\n\"type 'what is' in your google search bar. What is the most embarassing thing that pops up?\",\n\"what is an embarassing nickname that you once had?\",\n\"Who is your celebrity crush? why?\",\n\"How much toilet paper do you use for one wipe? (can be in number of perforated 'squares')\"\n]\n\nconst MIN_NUMBER_PLAYERS = 2\nconst LIE_DECK_END_COUNT = 2\n\nconst TRUTH_CARD_TOTAL_COUNT = 4\nconst LIE_CARD_TOTAL_COUNT = 1\n\nfunction shuffle(array){\n\n    var currentIndex = array.length\n      , temporaryValue\n      , randomIndex\n      ;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n    return array\n}\n\nclass Room extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            players: [],\n            current_card: {},\n            stage: 0,\n            liar: \"\",\n            current_player: 0,\n            name: window.location.pathname.substring(19),\n            vote_result: \"\",\n            voted: false,\n            true_deck: [],\n            lie_deck: [],\n            votes: {true_count: 0, lie_count:0},\n            turn_count: 0,\n            end_condition_count: 0,\n            round_count: 1,\n            info: {true_count: 0, lie_count:0},\n        }\n        this.startGame = this.startGame.bind(this)\n        this.updateVoteTruth = this.updateVoteTruth.bind(this)\n        this.updateVoteLie = this.updateVoteLie.bind(this)\n        this.restartGame = this.restartGame.bind(this)\n    }\n\n    isViewingMode() {\n        return this.state.name === '_'\n    }\n\n    startGame(){\n        const id = window.location.pathname.substring(6, 13)\n        let game = firebase.database().ref('games').child(id)\n        let cards = game.child('cards')\n        cards.child('true_deck').get().then((data)=>{\n            let new_card_deck = data.val()\n            let new_card = new_card_deck.shift()\n            game.update({\n                'votes': {true_count: 0, lie_count:0},\n                'current_card': {name: new_card[0], val: new_card[1]},\n                'stage': 1,\n                'cards': {\n                    true_deck: new_card_deck,\n                    lie_deck: []\n                },\n                'turn_count': 0,\n                'end_condition_count': 0,\n                'round_count': 1,\n                'info': {true_count: TRUTH_CARD_TOTAL_COUNT, lie_count: LIE_CARD_TOTAL_COUNT}\n            })\n        })\n\n\n    }\n\n    updateVoteTruth(){\n        const id = window.location.pathname.substring(6, 13)\n        let game = firebase.database().ref('games').child(id)\n\n        game.child('votes').get().then((data)=>{\n            let votes = data.val()\n            votes.true_count += 1\n            game.update({'votes': votes})\n            this.setState({\n                voted: true\n            })\n        })\n\n    }\n\n    updateVoteLie(){\n        const id = window.location.pathname.substring(6, 13)\n        let game = firebase.database().ref('games').child(id)\n        game.child('votes').get().then((data)=>{\n            let votes = data.val()\n            votes.lie_count += 1\n            game.update({'votes': votes})\n            this.setState({\n                voted: true\n            })\n        })\n    }\n\n    restartGame(){\n        const id = window.location.pathname.substring(6, 13)\n        let game = firebase.database().ref('games').child(id)\n        game.update({\n            stage: 0\n        })\n    }\n\n    // Based off https://css-tricks.com/building-a-real-time-chat-app-with-react-and-firebase/\n    async componentDidMount() {\n        const id = window.location.pathname.substring(6, 13)\n        let game = firebase.database().ref('games').child(id)\n        const players = game.child('players')\n        players.on('child_added', player => {\n            let updatedPlayers = this.state.players\n            updatedPlayers.push(player.val())\n            updatedPlayers.sort()\n            this.setState({\n                players: updatedPlayers\n            })\n        });\n        const stage = game.child('stage')\n        stage.on('value', stage => {\n            this.setState({\n                stage: stage.val()\n            })\n            if (stage.val() === 0) {\n                // Determine questions for current round\n                let new_questions = shuffle(all_questions)\n                let true_deck = []\n                for (let i = 0; i < TRUTH_CARD_TOTAL_COUNT + LIE_CARD_TOTAL_COUNT; i++){\n                    if(i < TRUTH_CARD_TOTAL_COUNT){\n                        true_deck.push([new_questions[i], true])\n                    }\n                    else{\n                        true_deck.push([new_questions[i], false])\n                    }\n                }\n                let selected_questions = {\n                    true_deck: true_deck\n                }\n                game.update({ 'cards': selected_questions })\n                // Determine liar for current round\n                let liar = this.state.players[Math.floor(Math.random() * this.state.players.length)]\n                game.update({ 'liar': liar })\n            }\n        })\n        const c = game.child('cards')\n        c.on('value', c => {\n            this.setState({\n                true_deck: c.child('true_deck').val(),\n                lie_deck: c.child('lie_deck').val()\n            })\n        })\n        const liar = game.child('liar')\n        liar.on('value', liar => {\n            this.setState({\n                liar: liar.val()\n            })\n        })\n        game.child('current_player').on('value', cp =>{\n            this.setState({\n                current_player: cp.val()\n            })\n        })\n        game.child('current_card').on('value', card=>{\n            this.setState({\n                current_card: card.val()\n            })\n        })\n        game.child('vote_result').on('value', vr=>{\n            this.setState({\n                vote_result: vr.val()\n            })\n        })\n        game.child('turn_count').on('value', tc=>{\n            this.setState({\n                turn_count: tc.val()\n            })\n        })\n        game.child('end_condition_count').on('value', ecc=>{\n            this.setState({\n                end_condition_count: ecc.val()\n            })\n        })\n        game.child('round_count').on('value', rc=>{\n            this.setState({\n                round_count: rc.val()\n            })\n        })\n        game.child('info').on('value', info=>{\n            this.setState({\n                info: info.val()\n            })\n        })\n        const votes = game.child('votes')\n        votes.on('value', votes => {\n            if(votes.val().lie_count + votes.val().true_count === this.state.players.length - 1){\n                // let true_count = 0\n                // let lie_count = 0\n                // for(let j = 0; j < votes.val().length; j++){\n                //     if (votes.val()[j] === true){\n                //         true_count += 1\n                //     }\n                //     else{\n                //         lie_count += 1\n                //     }\n                // }\n                game.child('cards').get().then((cards)=>{\n                    let new_true_deck = cards.val().true_deck\n                    let new_lie_deck = cards.val().lie_deck\n                    if(new_lie_deck == null){\n                        new_lie_deck = []\n                    }\n                    let result = \"\"\n                    let new_end_condition_count = this.state.end_condition_count\n                    let new_round_count = this.state.round_count\n                    let new_turn_count = this.state.turn_count + 1\n                    let new_info = this.state.info\n                    if(votes.val().lie_count > votes.val().true_count){\n                        new_lie_deck.push([this.state.current_card.name, this.state.current_card.val])\n                        result = \"lie deck\"\n                        new_end_condition_count = 0\n                    }\n                    else{\n                        new_true_deck.push([this.state.current_card.name, this.state.current_card.val])\n                        result = \"truth deck\"\n                        new_end_condition_count += 1\n                    }\n\n                    //check for game ending condition...\n                    if(new_lie_deck.length === LIE_DECK_END_COUNT || new_end_condition_count === this.state.players.length * 2){\n                        let end_info = {true_count:0, lie_count:0}\n                        let end_true_count = 0\n                        let end_lie_count = 0\n                        for(let u = 0; u < this.state.true_deck.length; u++){\n                            if(new_true_deck[u][1] === true){\n                                    end_true_count += 1\n                                }\n                                else{\n                                    end_lie_count += 1\n                                }\n                        }\n                        end_info = {true_count: end_true_count, lie_count: end_lie_count}\n                        game.update({\n                            'stage': 2,\n                            'cards': {\n                                true_deck: new_true_deck,\n                                lie_deck: new_lie_deck\n                            },\n                            'vote_result': result,\n                            'info': end_info\n                        })\n                        this.setState({\n                            voted: false\n                        })\n                    }\n                    else{\n                        let current_player = this.state.current_player + 1\n                        if (current_player === this.state.players.length){\n                            current_player = 0\n                        }\n                        if(new_turn_count % this.state.players.length === 0){\n                            let t = 0\n                            let l = 0\n                            for(let k = 0; k < new_true_deck.length; k++){\n                                if(new_true_deck[k][1] === true){\n                                    t += 1\n                                }\n                                else{\n                                    l += 1\n                                }\n                            }\n                            new_info = {true_count: t, lie_count: l}\n                            new_round_count += 1\n                        }\n                        let new_card = new_true_deck.shift()\n                        game.update({\n                            'votes': {true_count: 0, lie_count:0},\n                            'current_player': current_player,\n                            'current_card': {name: new_card[0], val:new_card[1]},\n                            'cards': {\n                                true_deck: new_true_deck,\n                                lie_deck: new_lie_deck\n                            },\n                            'vote_result': result,\n                            'end_condition_count': new_end_condition_count,\n                            'round_count': new_round_count,\n                            'turn_count': new_turn_count,\n                            'info': new_info\n                        })\n                        this.setState({\n                            voted: false\n                        })\n                    }\n                })\n\n            }\n            else{\n                this.setState({\n                    votes: votes.val()\n                })\n            }\n        })\n    }\n\n    renderPlayerList() {\n        const answeringPlayer = this.state.players[this.state.current_player]\n\n        return (\n            <div className='gameScreenLeft'>\n                    <p className='playersLabel'>\n                        players:\n                    </p>\n                    <div className='playersList'>\n                        {this.state.players.map((player) => {\n                            return (\n                                <li key={player}>\n                                    <div className={player === answeringPlayer ? 'currentPlayer' : undefined} >\n                                        {player}\n                                    </div>\n                                </li>\n                            )\n                        }\n                        )}\n                    </div>\n                </div>\n        )\n    }\n\n    renderWaitingRoom() {\n        const hasEnoughPlayers = this.state.players.length >= MIN_NUMBER_PLAYERS\n        return (\n            <div className='waiting'>\n                <p className='linkLabel'>send your friends this code:</p>\n                <p className='link'>{window.location.pathname.substring(6, 13)}</p>\n                {hasEnoughPlayers && <button className='block' onClick={this.startGame} style={{margin: 'auto'}}>start</button>}\n                {!hasEnoughPlayers && <p>{MIN_NUMBER_PLAYERS - this.state.players.length} more players needed to start!</p>}\n            </div>\n        )\n    }\n\n    renderEndPage() {\n        const end_info = this.state.info\n        const truthTellersAutoWin = end_info.lie_count === 0\n        return (\n            <div>\n                <div className='liarLabel'>\n                    There are {end_info.true_count} truth cards, {end_info.lie_count} lie cards in main deck.\n                    {truthTellersAutoWin && <>Truth-tellers win, and {this.state.liar} is the liar / loser!</>}\n                    {!truthTellersAutoWin && <div>\n                        <br/>\n                        Since there are lie cards in the main deck, vote (over zoom) who you think the liar is.\n                        <br/>\n                        <br/>\n                        <details>\n                            <summary>Toggle to show the liar (don't click until everyone has voted!)</summary>\n                            <br/><br/>\n                            {this.state.liar} is the liar!\n                            <br/><br/>\n                            If the majority voted correctly, the truth-tellers win!\n                            Otherwise, the {this.state.liar} wins!\n                        </details>\n                    </div>}\n                </div>\n                <button className='block' onClick={this.restartGame} style={{ marginTop: '20px', marginLeft: 'auto', marginRight: 'auto' }}>play again</button>\n            </div>\n        )\n    }\n\n    renderMainGamePage() {\n        const answeringPlayer = this.state.players[this.state.current_player]\n        const currentQuestion = this.state.current_card.name\n        const currentPlayer = this.state.name\n        const currentPlayerIsLiar = this.state.name === this.state.liar\n        const cardInfo = this.state.info\n        const roundCount = this.state.round_count\n\n        return (\n            <div>\n                {!this.isViewingMode() && !currentPlayerIsLiar &&\n                    <div>\n                        <u>You are a truth-teller.</u><br/>\n                        You are trying to detect when other people are lying,\n                        and figure out who is the liar.\n                    </div>\n                }\n                {currentPlayerIsLiar &&\n                    <div>\n                        <u>You are the liar.</u><br/>\n                        You must always lie when it is your turn to answer questions.\n                        Try to get dishonest answer integrity cards into the final\n                        lie deck without being detected.\n                    </div>\n                }\n                <div>\n                    {currentPlayer !== answeringPlayer ? (\n                        <p className='promptLabel'>{answeringPlayer} is answering the question '{currentQuestion}'</p>\n                        ) : (\n                        <>\n                            <p className='promptLabel'>It's your turn to answer this question: <br/> {currentQuestion}</p>\n                            <p className='promptLabel'>\n                                You have drawn <span className='hl'>{this.state.current_card.val ? 'an honest' : 'a dishonest'}</span> answer-integrity card.\n                                As a <span className='hl'>{currentPlayerIsLiar ? 'liar' : 'truth-teller'}</span>,\n                                you must <span className='hl'>{currentPlayerIsLiar ? 'lie' : this.state.current_card.val ? 'tell the truth' : 'lie'}</span>.\n                            </p>\n\n                        </>\n                        )\n                    }\n                </div>\n                {currentPlayer !== answeringPlayer && !this.isViewingMode() &&\n                    <div>\n                    {this.state.voted === false &&\n                        <div className='votingSection'>\n                            Do you think {answeringPlayer} has an honest or dishonest integrity card?\n                            <div className='votingOptions'>\n                                <button className='block' onClick={this.updateVoteTruth}>Honest</button>\n                                <button className='block' onClick={this.updateVoteLie}>Dishonest</button>\n                            </div>\n                        </div>\n                    }\n                    {this.state.voted === true &&\n                        <div className='promptLabel'>\n                            You have voted!\n                        </div>\n                    }\n                    </div>\n                }\n                {\n                    currentPlayer === answeringPlayer && <div className='votingSection'>\n                        Other players are currently voting on {this.isViewingMode() ? answeringPlayer + \"'s\": 'your'} ~ honesty ~ 😌😌😌\n                    </div>\n                }\n\n                <br/><br/>\n                <div className='linkLabel'>\n                    As of start of round {roundCount}, there were {cardInfo.true_count} truth cards and {cardInfo.lie_count} lie cards\n                    in the main deck.\n                </div>\n                {this.state.vote_result && <div className='linkLabel'>\n                    <br/>\n                    The last question got put in {this.state.vote_result}. There are {this.state.lie_deck?.length || 0} cards in the lie deck.\n                </div>}\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className='gameScreen'>\n                {this.renderPlayerList()}\n                <div className='gameScreenRight'>\n                    {this.state.stage === 0 && this.renderWaitingRoom()}\n                    {this.state.stage === 1 && this.renderMainGamePage()}\n                    {this.state.stage === 2 && this.renderEndPage()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Room;\n","import React, { Component } from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\nimport Home from './components/Home'\nimport Instructions from './components/Instructions'\nimport Acknowledgements from './components/Acknowledgements'\nimport EnterUsername from './components/Enter-username'\nimport Room from './components/Room'\nimport './components/Components.css'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" render={ props => <Home {...props} />} />\n        <Route exact path=\"/instructions\" render={ props => <Instructions {...props} />} />\n        <Route exact path=\"/acknowledgements\" render={ props => <Acknowledgements {...props} />} />\n        <Route exact path=\"/enter\" render={ props => <EnterUsername {...props} />} />\n        <Route exact path=\"/enter/:id\" render={ props => <EnterUsername {...props} />} />\n        <Route exact path=\"/room/:id\" render={ props => <Room {...props} />} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}