{"version":3,"sources":["components/Home.js","components/Instructions.js","components/Acknowledgements.js","firebase.js","components/Enter-username.js","components/Room.js","App.js","reportWebVitals.js","index.js"],"names":["Home","className","to","style","textDecoration","marginLeft","textAlign","marginRight","height","marginTop","href","target","src","alt","width","rel","Instructions","fontSize","margin","Acknowledgements","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","rand","require","EnterUsername","hist","useHistory","htmlFor","type","id","onClick","name","document","getElementById","value","length","innerHTML","test","url","window","location","pathname","games","database","ref","generate","game","liar","players","stage","cards","true_deck","lie_deck","current_player","current_card","votes","child","set","replace","substring","player","push","all_questions","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","Room","props","state","vote_result","voted","startGame","bind","updateVoteTruth","updateVoteLie","restartGame","new_true_deck","val","new_card","shift","update","this","setState","a","on","updatedPlayers","new_questions","i","selected_questions","c","cp","card","true_count","lie_count","j","new_lie_deck","current_question","map","React","Component","App","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.920f6220.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Home() {\r\n    return (\r\n        <div>\r\n            <div className='extLinks'>\r\n                <Link to='/instructions' style={{ textDecoration: 'none' }}><p className='howToPlayLink' style={{ marginLeft: '15px' }}><u>how to play</u></p></Link>\r\n                <div style={{ textAlign: 'right', marginLeft: 'auto', marginRight: '15px' }}>\r\n                    <p />\r\n                    <Link to='/acknowledgements' style={{ textDecoration: 'none' }}><p className='acknowledgementsLink'><u>about / acknowledgements</u></p></Link>{' '}\r\n                </div>\r\n            </div>\r\n            <div className='container' style={{ height: '90vh' }}>\r\n                <h1 style={{ marginTop: '-20px' }}>who's the liar? 🤥</h1>\r\n                <Link to='/enter' style={{ textDecoration: 'none' }}><button className='block' style={{ marginTop: '-15px', marginLeft: 'auto', marginRight: 'auto' }}>create room</button></Link>\r\n            </div>\r\n            <div className='extLinks'>\r\n                <a href=\"https://www.producthunt.com/posts/who-s-the-liar?utm_source=badge-featured&utm_medium=badge&utm_souce=badge-who-s-the-liar\" target=\"_blank\"><img src=\"https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=282827&theme=light\" alt=\"who's the liar? - Play this simple web-based game with your friends! | Product Hunt\" width=\"250\" height=\"54\" style={{ marginLeft: '15px', marginTop: '-25px' }} /></a>\r\n                <div style={{ textAlign: 'right', marginLeft: 'auto', marginRight: '15px' }}>\r\n                    <a href='https://github.com/fibanneacci/liar' target='blank' rel='noreferrer'>source code</a> (initial work by <a href='https://anli.io' target='_blank' rel='noreferrer'>anne</a>, see <a href='https://github.com/fibanneacci/liar/graphs/contributors' target=\"_blank\" rel='noreferrer'>contributors</a>)\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Instructions() {\r\n    return (\r\n        <div>\r\n            <h1>how to play</h1>\r\n            <p style={{ width: '75vw', fontSize: '1.5rem', textAlign: 'justify', margin: 'auto' }}>\r\n                one word is randomly chosen, and one player is randomly assigned as the \"liar\". all players are given the chosen word's category, and all but the liar are given the word.\r\n                the specific rules are up to you and your friends (e.g. # of turns), but a common way to play involves taking turns describing the word: non-liars try to provide enough\r\n                info to prove their innocence but not enough for the liar to guess the word, while the liar tries to fit in. at the end, everyone votes on who they think the liar is.<br /><br />\r\n                best played over video call! (may implement live chat in the future)\r\n            </p>\r\n            <Link to='/' style={{ textDecoration: 'none' }}><button className='block' style={{ marginTop: '30px', marginLeft: 'auto', marginRight: 'auto' }}>back</button></Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Instructions;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Acknowledgements() {\r\n    return (\r\n        <div>\r\n            <h1>about / acknowledgements</h1>\r\n            <p style={{ width: '75vw', fontSize: '1.5rem', textAlign: 'justify', margin: 'auto' }}>\r\n                i didn't invent this game! i built it after watching{' '}\r\n                <a href='https://youtu.be/5MS3iaNmKQE?t=401' target='_blank' rel='noreferrer'>a video of red velvet playing it</a>.<br /><br />\r\n                i also followed a few very helpful tutorials along the way: <a href='https://css-tricks.com/intro-firebase-react/' target='_blank' rel='noreferrer'>this</a>, <a href='https://www.developintelligence.com/blog/2017/04/building-a-realtime-chess-game-with-react-and-firebase/' target='_blank' rel='noreferrer'>this</a>, <a href='https://medium.com/@hasangi/writing-deleting-and-updating-data-in-firebase-realtime-database-with-javascript-f26113ec8c93' target='_blank' rel='noreferrer'>this</a>, and <a href='https://css-tricks.com/building-a-real-time-chat-app-with-react-and-firebase/' target='_blank' rel='noreferrer'>this</a>.<br /><br />\r\n                styling for all buttons done with linus lee's <a href='https://thesephist.github.io/blocks.css/' target='_blank' rel='noreferrer'>blocks.css</a>, game room ids generated with <a href='https://www.npmjs.com/package/randomstring' target='_blank' rel='noreferrer'>node-randomstring</a>.<br /><br />\r\n                built with <a href='https://firebase.google.com/docs' target='_blank' rel='noreferrer'>firebase</a> and <a href='https://create-react-app.dev' target='_blank' rel='noreferrer'>react</a>. usernames are the only player-specific data stored in the database. i did not enable firebase's google analytics for this project.\r\n            </p>\r\n            <Link to='/' style={{ textDecoration: 'none' }}><button className='block' style={{ marginTop: '30px', marginLeft: 'auto', marginRight: 'auto' }}>back</button></Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Acknowledgements;\r\n","import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCh8YuaMsuPOca-PX4FZxIq9VvrGY9jvX8\",\r\n  authDomain: \"cs247g-9d957.firebaseapp.com\",\r\n  projectId: \"cs247g-9d957\",\r\n  storageBucket: \"cs247g-9d957.appspot.com\",\r\n  messagingSenderId: \"943697705504\",\r\n  appId: \"1:943697705504:web:8dac44753753dba7405a45\",\r\n  measurementId: \"G-8872W6HKMJ\"\r\n};\r\n\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport firebase from '../firebase.js'\r\nvar rand = require('randomstring')\r\n\r\nfunction EnterUsername() {\r\n    const hist = useHistory()\r\n    function Submit() {\r\n        const name = document.getElementById('username').value\r\n        // If username is empty or more than 40 characters\r\n        if (name.length > 40 || name.length === 0) {\r\n            document.getElementById('usernameValidationLabel').innerHTML = 'please enter between 1 and 40 characters'\r\n        }\r\n        // If contains non-alphanumeric\r\n        else if (/[^0-9A-Za-z]/.test(name)) {\r\n            document.getElementById('usernameValidationLabel').innerHTML = 'please enter alphanumeric only'\r\n        } else {\r\n            const url = window.location.pathname\r\n            const games = firebase.database().ref('games')\r\n            // If URL doesn't have id, create room\r\n            if (url.length === 6) {\r\n                const id = rand.generate(7)\r\n                const cards = {\r\n                    true_deck: [],\r\n                    lie_deck:[]\r\n                }\r\n                const game = {\r\n                    liar: \"\",\r\n                    players: [\r\n                        name\r\n                    ],\r\n                    stage: 0,\r\n                    cards: cards,\r\n                    current_player: 0,\r\n                    current_card: [],\r\n                    votes: []\r\n                }\r\n                games.child(id).set(game)\r\n                hist.replace('/room/' + id + '&name=' + name)\r\n            }\r\n            // If URL has id, join existing room\r\n            else {\r\n                const id = url.substring(7, 14)\r\n                const player = document.getElementById('username').value\r\n                games.child(id).child('players').push(player)\r\n                hist.replace('/room/' + id + '&name=' + name)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <label className='usernameLabel' htmlFor='username'>username:</label> {/*check for uniqueness, or just add a number to the end if not unique*/}\r\n            <input className='usernameInput' type='text' id='username' />\r\n            <button className='block' onClick={Submit} style={{ marginLeft: 'auto', marginRight: 'auto' }}>enter</button>\r\n            <p className='usernameValidationLabel' id='usernameValidationLabel'>(alphanumeric only)</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EnterUsername;\r\n","import React from 'react'\r\nimport firebase from '../firebase.js'\r\n\r\n// Create wordsets\r\nlet all_questions = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\r\n\r\nfunction shuffle(array){\r\n\r\n    var currentIndex = array.length\r\n      , temporaryValue\r\n      , randomIndex\r\n      ;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n    return array\r\n}\r\n\r\nclass Room extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            players: [],\r\n            current_card: [],\r\n            stage: 0,\r\n            liar: \"\",\r\n            current_player: 0,\r\n            name: window.location.pathname.substring(19),\r\n            vote_result: true,\r\n            voted: false,\r\n            true_deck: [],\r\n            lie_deck: []\r\n        }\r\n        this.startGame = this.startGame.bind(this)\r\n        this.updateVoteTruth = this.updateVoteTruth.bind(this)\r\n        this.updateVoteLie = this.updateVoteLie.bind(this)\r\n        this.restartGame = this.restartGame.bind(this)\r\n    }\r\n\r\n    startGame(){\r\n        const id = window.location.pathname.substring(6, 13)\r\n        let game = firebase.database().ref('games').child(id)\r\n        let cards = game.child('cards')\r\n        let new_true_deck = cards.child('true_deck').val()\r\n        let new_card = new_true_deck.shift()\r\n        game.update({\r\n            'votes': [], \r\n            'current_card': new_card,\r\n            'cards': {\r\n                true_deck: new_true_deck,\r\n                lie_deck: []\r\n            }\r\n        })\r\n    }\r\n\r\n    updateVoteTruth(){\r\n        const id = window.location.pathname.substring(6, 13)\r\n        let game = firebase.database().ref('games').child(id)\r\n        let votes = game.child('votes').val()\r\n        votes.push(true)\r\n        game.update({'votes': votes})\r\n        this.setState({\r\n            voted: true\r\n        })\r\n    }\r\n\r\n    updateVoteLie(){\r\n        const id = window.location.pathname.substring(6, 13)\r\n        let game = firebase.database().ref('games').child(id)\r\n        let votes = game.child('votes').val()\r\n        votes.push(false)\r\n        game.update({'votes': votes})\r\n        this.setState({\r\n            voted: true\r\n        })\r\n    }\r\n\r\n    restartGame(){\r\n        const id = window.location.pathname.substring(6, 13)\r\n        let game = firebase.database().ref('games').child(id)\r\n        game.update({\r\n            stage: 0\r\n        })\r\n    }\r\n\r\n    // Based off https://css-tricks.com/building-a-real-time-chat-app-with-react-and-firebase/\r\n    async componentDidMount() {\r\n        const id = window.location.pathname.substring(6, 13)\r\n        let game = firebase.database().ref('games').child(id)\r\n        const players = game.child('players')\r\n        players.on('child_added', player => {\r\n            let updatedPlayers = this.state.players\r\n            updatedPlayers.push(player.val())\r\n            this.setState({\r\n                players: updatedPlayers\r\n            })\r\n        });\r\n        const stage = game.child('stage')\r\n        stage.on('value', stage => {\r\n            this.setState({\r\n                stage: stage.val()\r\n            })\r\n            if (stage.val() === 0) {\r\n                // Determine questions for current round\r\n                let new_questions = shuffle(all_questions)\r\n                let true_deck = []\r\n                for(let i = 0; i < 10; i++){\r\n                    if(i < 8){\r\n                        true_deck.push([new_questions[i], true])\r\n                    }\r\n                    else{\r\n                        true_deck.push([new_questions[i], false])\r\n                    }\r\n                }\r\n                let selected_questions = {\r\n                    true_deck: true_deck,\r\n                    lie_deck: []\r\n                }\r\n                game.update({ 'cards': selected_questions })\r\n                // Determine liar for current round\r\n                let liar = this.state.players[Math.floor(Math.random() * this.state.players.length)]\r\n                game.update({ 'liar': liar })\r\n            }\r\n        })\r\n        const c = game.child('cards')\r\n        c.on('value', c => {\r\n            this.setState({\r\n                true_deck: c.child('true_deck').val(),\r\n                lie_deck: c.child('lie_deck').val()\r\n            })\r\n        })\r\n        const liar = game.child('liar')\r\n        liar.on('value', liar => {\r\n            this.setState({\r\n                liar: liar.val()\r\n            })\r\n        })\r\n        game.child('current_player').on('value', cp =>{\r\n            this.setState({\r\n                current_player: cp.val()\r\n            })\r\n        })\r\n        game.child('current_card').on('value', card=>{\r\n            this.setState({\r\n                current_card: card.val()\r\n            })\r\n        })\r\n        const votes = game.child('votes')\r\n        votes.on('value', votes => {\r\n            \r\n            if(votes.val().length === this.state.players.length-1){\r\n                let true_count = 0\r\n                let lie_count = 0\r\n                for(let j = 0; j < votes.val().length; j++){\r\n                    if (votes.val()[j] === true){\r\n                        true_count += 1\r\n                    }\r\n                    else{\r\n                        lie_count += 1\r\n                    }\r\n                }\r\n                let cards = game.child('cards')\r\n                let new_true_deck = cards.child('true_deck').val()\r\n                let new_lie_deck = cards.child('lie_deck').val()\r\n                if(lie_count > true_count){\r\n                    new_lie_deck.push(this.state.current_question)\r\n                }\r\n                else{\r\n                    new_true_deck.push(this.state.current_question)\r\n                }\r\n                //check for game ending condition...\r\n                if(new_lie_deck.length === 4){\r\n                    game.update({\r\n                        'stage': 2,\r\n                        'cards': {\r\n                            true_deck: new_true_deck,\r\n                            lie_deck: new_lie_deck\r\n                        }\r\n                    })\r\n                }\r\n                else{\r\n                    let current_player = this.state.current_player + 1\r\n                    if (current_player === this.state.players.length){\r\n                        current_player = 0\r\n                    }\r\n                    let new_card = new_true_deck.shift()\r\n                    game.update({\r\n                        'votes': [], \r\n                        'current_player': current_player, \r\n                        'current_card': new_card,\r\n                        'cards': {\r\n                            true_deck: new_true_deck,\r\n                            lie_deck: new_lie_deck\r\n                        }\r\n                    })\r\n                    this.setState({\r\n                        voted: false\r\n                    })\r\n                }\r\n            }\r\n            else{\r\n                this.setState({\r\n                    votes: votes.val()\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='gameScreen'>\r\n                <div className='gameScreenLeft'>\r\n                    <p className='playersLabel'>\r\n                        players:\r\n                    </p>\r\n                    <div className='playersList'>\r\n                        {this.state.players.map((player) =>\r\n                            <li key={player}>{player}</li>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <div className='gameScreenRight'>\r\n                    {this.state.stage === 0 && // Waiting room\r\n                        <div>\r\n                            <p className='linkLabel'>send your friends this link:</p>\r\n                            <p className='link'>{'https://cs247g-9d957.web.app' + window.location.pathname.replace('room', 'enter').substring(0, 14)}</p>\r\n                            <button className='block' onClick={this.startGame} style={{ marginTop: '20px', marginLeft: 'auto', marginRight: 'auto' }}>start</button>\r\n                        </div>\r\n                    }\r\n                    {this.state.stage === 1 && // Game started\r\n                        <div>\r\n                            <div className='promptLabel'>\r\n                                {window.location.pathname.substring(19) !== this.state.liar &&\r\n                                    <div>You are a truth-teller.</div>\r\n                                }\r\n                                {window.location.pathname.substring(19) === this.state.liar &&\r\n                                    <div>You are the liar</div>\r\n                                }\r\n                            </div>\r\n                            <div>\r\n                                {this.state.current_question[0]}\r\n                            </div>\r\n                            {this.state.name !== this.state.players[this.state.current_player]  && \r\n                                <div>\r\n                                    <button className='block' onClick={this.updateVoteTruth} style={{ marginTop: '20px', marginLeft: 'auto', marginRight: 'auto' }}>Truth</button>\r\n                                    <button className='block' onClick={this.updateVoteLie} style={{ marginTop: '20px', marginLeft: 'auto', marginRight: 'auto' }}>Lie</button>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    }\r\n                    {this.state.stage === 2 && // Game ended\r\n                        <div>\r\n                            <div className='liarLabel'>\r\n                                {this.state.liar} was the liar!\r\n                            </div>\r\n                            <button className='block' onClick={this.restartGame} style={{ marginTop: '20px', marginLeft: 'auto', marginRight: 'auto' }}>play again</button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Room;\r\n","import React, { Component } from 'react'\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\n\r\nimport Home from './components/Home'\r\nimport Instructions from './components/Instructions'\r\nimport Acknowledgements from './components/Acknowledgements'\r\nimport EnterUsername from './components/Enter-username'\r\nimport Room from './components/Room'\r\nimport './components/Components.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" render={ props => <Home {...props} />} />\r\n        <Route exact path=\"/instructions\" render={ props => <Instructions {...props} />} />\r\n        <Route exact path=\"/acknowledgements\" render={ props => <Acknowledgements {...props} />} />\r\n        <Route exact path=\"/enter\" render={ props => <EnterUsername {...props} />} />\r\n        <Route exact path=\"/enter/:id\" render={ props => <EnterUsername {...props} />} />\r\n        <Route exact path=\"/room/:id\" render={ props => <Room {...props} />} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}