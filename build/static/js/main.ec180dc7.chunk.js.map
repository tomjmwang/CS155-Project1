{"version":3,"sources":["components/Home.js","components/Instructions.js","components/Acknowledgements.js","firebase.js","components/Enter-username.js","components/Room.js","App.js","reportWebVitals.js","index.js"],"names":["Home","props","state","code","val","this","setState","target","value","className","to","type","onChange","handleChange","bind","style","textDecoration","React","Component","Instructions","fontWeight","margin","paddingTop","href","rel","Acknowledgements","width","fontSize","textAlign","marginTop","marginLeft","marginRight","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","rand","require","EnterUsername","hist","useHistory","roomId","url","window","location","pathname","length","substring","undefined","htmlFor","id","onClick","name","document","getElementById","innerHTML","test","games","database","ref","player","child","push","replace","generate","game","liar","players","stage","cards","true_deck","lie_deck","current_player","current_card","votes","true_count","lie_count","vote_result","turn_count","end_condition_count","round_count","info","answers","current_votes","set","all_questions","ANSWER_STR_TRUTH","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","Room","voted","current_vote","startGame","updateVoteTruth","updateVoteLie","restartGame","audio","Audio","volume","get","then","data","new_card_deck","new_card","shift","update","cv","new_current_votes","Object","keys","a","on","updatedPlayers","sort","new_questions","i","TRUTH_CARD_TOTAL_COUNT","selected_questions","c","cp","card","vr","tc","ecc","rc","an","new_true_deck","new_lie_deck","result","new_end_condition_count","new_round_count","new_turn_count","new_info","new_answers","end_info","end_true_count","end_lie_count","u","t","l","k","play","answeringPlayer","map","hasEnoughPlayers","roomCode","origin","truthTellersAutoWin","renderFinalVotesByAnswer","slice","reverse","open","questionNum","answerer","lies","truths","forEach","question","elem","isViewingMode","currentQuestion","currentPlayer","currentPlayerIsLiar","key","ind","renderCurrentQuestion","renderRemainingLieVotes","renderPlayersHaveVotedSection","renderAdminSection","renderPlayerIdentity","renderVotingSection","renderPlayerList","renderVotingLog","renderWaitingRoom","renderMainGamePage","renderEndPage","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.ec180dc7.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nclass Home extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            code: \"\"\n        }\n    }\n\n    handleChange(val){\n        this.setState({code: val.target.value})\n    }\n\n    render() {\n        return (\n            <div className='root'>\n                <div className='container'>\n                    <h1>☁️☁️ 😇😇😈😇 ☁️☁️ <br/> Devil Among Us  </h1>\n                    <h2 className='subheader'>Detect lies as if your (after) life depends on it\n                        <br/><br/>\n                        <Link to='/instructions'>How to play &rarr;</Link>\n                    </h2>\n                    <Link to='/enter'><button className='block'>create new room</button></Link>\n                    <input className='usernameInput' type='text' value={this.state.code} onChange={this.handleChange.bind(this)} />\n                    <Link to={'/enter/' + this.state.code} style={{ textDecoration: 'none' }}><button className='block'>enter with code</button></Link>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Home;\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction Instructions() {\n    return (\n        <div className='root' style={{'font-size': '18px', fontWeight: 'bold', 'overflow': 'scroll'}}>\n            <div className='container instructions' >\n            <h1 style={{margin: 'auto', paddingTop: 60}}>How to play</h1>\n            <p>Welcome to Heaven! Or so you think. Turns out, God has become pickier than before and now has a new rule for folks wanting to enter heaven: they must be able to tell when people are lying. In order to verify who does or does not belong in heaven with these new rules, everyone must participate in a group lie-detecting simulation.</p>\n\n            <p>God will give each player a question, as well as an instruction of whether to tell the truth or lie (in order for the simulation to work, sometimes you will have to lie 😔 ). After each player answers, everyone else will vote on whether or not they think that player is telling the truth or lying. <u>Players can only vote a total of four answers as lies.</u> This continues until every player has answered two questions each.</p>\n\n            <p>There is one catch: unbeknownst to God, one of the players is the Devil and is trying to bring everyone down to hell with them. They can only lie, regardless of what God tells them, and are trying to make the Saints fail their lie-detection test without being detected.</p>\n\n            <p>After everyone has answered two questions, God will reveal if the players have mistakenly voted any of the lies as truths. If no lies were mistaken as truths, then everyone will go to heaven, and the Devil goes back to hell!</p>\n            <p>If there were any lies mistaken as truths, however, the group still has one saving grace: if majority can identify who the Devil is, they can send the Devil back to hell and re-enter heaven. Otherwise, the Devil wins and will bring them all to hell.</p>\n\n            <p>\n            <details>\n                <summary>Tips + tricks!</summary>\n                <p><u>As a Saint</u>, try to detect when other people are lying and figure out who is the Devil. If God's will is for you to lie, try to make it obvious\n                so your fellow saints can detect it!</p>\n\n                <p><u>As a Devil</u>, you must always lie when answering questions. Try to trick the other players into thinking you are telling the truth,\n                    without being detected!</p>\n            </details>\n            </p>\n\n            <p>\n            <a href='https://docs.google.com/document/d/1tKZH9MmeWXQc_eNcoHw3SsS-xuUpcVUN5S6INx_17vs/edit?usp=sharing' target=\"_blank\" rel=\"noreferrer\">\n                You can read the full rules here &rarr;\n            </a></p>\n            <p><Link to='/' >&larr; back</Link></p>\n        </div>\n        </div>\n    );\n}\n\nexport default Instructions;\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction Acknowledgements() {\n    return (\n        <div>\n            <h1>about / acknowledgements</h1>\n            <p style={{ width: '75vw', fontSize: '1.5rem', textAlign: 'justify', margin: 'auto' }}>\n                i didn't invent this game! i built it after watching{' '}\n                <a href='https://youtu.be/5MS3iaNmKQE?t=401' target='_blank' rel='noreferrer'>a video of red velvet playing it</a>.<br /><br />\n                i also followed a few very helpful tutorials along the way: <a href='https://css-tricks.com/intro-firebase-react/' target='_blank' rel='noreferrer'>this</a>, <a href='https://www.developintelligence.com/blog/2017/04/building-a-realtime-chess-game-with-react-and-firebase/' target='_blank' rel='noreferrer'>this</a>, <a href='https://medium.com/@hasangi/writing-deleting-and-updating-data-in-firebase-realtime-database-with-javascript-f26113ec8c93' target='_blank' rel='noreferrer'>this</a>, and <a href='https://css-tricks.com/building-a-real-time-chat-app-with-react-and-firebase/' target='_blank' rel='noreferrer'>this</a>.<br /><br />\n                styling for all buttons done with linus lee's <a href='https://thesephist.github.io/blocks.css/' target='_blank' rel='noreferrer'>blocks.css</a>, game room ids generated with <a href='https://www.npmjs.com/package/randomstring' target='_blank' rel='noreferrer'>node-randomstring</a>.<br /><br />\n                built with <a href='https://firebase.google.com/docs' target='_blank' rel='noreferrer'>firebase</a> and <a href='https://create-react-app.dev' target='_blank' rel='noreferrer'>react</a>. usernames are the only player-specific data stored in the database. i did not enable firebase's google analytics for this project.\n            </p>\n            <Link to='/' style={{ textDecoration: 'none' }}><button className='block' style={{ marginTop: '30px', marginLeft: 'auto', marginRight: 'auto' }}>back</button></Link>\n        </div>\n    );\n}\n\nexport default Acknowledgements;\n","import firebase from 'firebase'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCh8YuaMsuPOca-PX4FZxIq9VvrGY9jvX8\",\n  authDomain: \"cs247g-9d957.firebaseapp.com\",\n  projectId: \"cs247g-9d957\",\n  storageBucket: \"cs247g-9d957.appspot.com\",\n  messagingSenderId: \"943697705504\",\n  appId: \"1:943697705504:web:8dac44753753dba7405a45\",\n  measurementId: \"G-8872W6HKMJ\"\n};\n\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport firebase from '../firebase.js'\nvar rand = require('randomstring')\n\nfunction EnterUsername() {\n    const hist = useHistory()\n\n    function roomId() {\n        const url = window.location.pathname\n        return url.length > 6 ? url.substring(7, 14) : undefined\n    }\n\n    function Submit() {\n        const name = document.getElementById('username').value\n        // If username is empty or more than 40 characters\n        if (name.length > 40 || name.length === 0) {\n            document.getElementById('usernameValidationLabel').innerHTML = 'please enter between 1 and 40 characters'\n        }\n        // If contains non-alphanumeric\n        else if (/[^0-9A-Za-z]/.test(name)) {\n            document.getElementById('usernameValidationLabel').innerHTML = 'please enter alphanumeric only'\n        } else {\n            const id = roomId()\n            const games = firebase.database().ref('games')\n            // If URL doesn't have id, create room\n            if (!id) {\n                const id = rand.generate(7)\n                const cards = {\n                    true_deck: [\"\"],\n                    lie_deck:[\"\"]\n                }\n                const game = {\n                    liar: \"\",\n                    players: [\n                        name\n                    ],\n                    stage: 0,\n                    cards: cards,\n                    current_player: 0,\n                    current_card: {name: \"\", val: true},\n                    votes: {true_count: 0, lie_count:0},\n                    vote_result: \"\",\n                    turn_count: 0,\n                    end_condition_count: 0,\n                    round_count: 1,\n                    info: {true_count: 0, lie_count:0},\n                    answers: [\"\"],\n                    current_votes: {\"_\":\"\"}\n                }\n                games.child(id).set(game)\n                hist.replace('/room/' + id + '&name=' + name)\n            }\n            // If URL has id, join existing room\n            else {\n                const player = document.getElementById('username').value\n                games.child(id).child('players').push(player)\n                hist.replace('/room/' + id + '&name=' + name)\n            }\n        }\n    }\n\n    function enterViewMode() {\n        // This should not collide with any usernames, as it is not alphanumeric.\n        hist.replace(`/room/${roomId()}&name=_`)\n    }\n\n    return (\n        <div className='root'>\n            <div className='container'>\n                <label className='usernameLabel' htmlFor='username'>username:</label> {/*check for uniqueness, or just add a number to the end if not unique*/}\n                <input className='usernameInput' type='text' id='username' />\n                <button className='block' onClick={Submit} style={{ marginLeft: 'auto', marginRight: 'auto' }}>enter</button>\n                <p className='usernameValidationLabel' id='usernameValidationLabel'>(alphanumeric only)</p>\n\n                {roomId() && <div>\n                    <button className='block' onClick={enterViewMode} style={{ marginLeft: 'auto', marginRight: 'auto' }}>use screen share mode</button>\n                    <p className='usernameValidationLabel' id='usernameValidationLabel'>Good for screen sharing on zoom! No secrets leaked here ;)</p>\n                </div>}\n            </div>\n        </div>\n    );\n}\n\nexport default EnterUsername;\n","import React from 'react'\nimport firebase from '../firebase.js'\n\n// Create wordsets\nconst all_questions = [\n\"What is one of your favorite life hacks?\",\n\"What television show or movie makes you laugh the hardest and why?\",\n\"Are you a cat person or dog person?\",\n\"Who do you most admire and why?\",\n\"Do you think you're courageous or timid? Why?\",\n\"Which is harder for you to give: time or money? Why?\",\n\"How old where you when you had your first kiss?\",\n\"What is the silliest thing you have done in front of an unfamiliar crowd?\",\n\"What is the class you got the worst grade in?\",\n\"Have you ever cheated on an exam or quiz? If so, what is the exam on?\",\n\"What is a secret you kept from your parents?\",\n\"Are you a morning person or a night person?\",\n\"How many selfies do you take a day?\",\n\"are you a coffee person or a tea person?\",\n\"describe your favorite childhood show\",\n\"What's the longest time you've ever gone without showering?\",\n\"type 'what is' in your google search bar. What is the most embarassing thing that pops up?\",\n\"what is an embarassing nickname that you once had?\",\n\"Who is your celebrity crush? why?\",\n\"How much toilet paper do you use for one wipe? (can be in number of perforated 'squares')\"\n]\n\nconst MIN_NUMBER_PLAYERS = 4\nconst GAME_END_TURN_COUNT = 8\nconst LIE_DECK_END_COUNT = 4\n\nconst TRUTH_CARD_TOTAL_COUNT = 6\nconst LIE_CARD_TOTAL_COUNT = 2\n\nconst ANSWER_STR_TRUTH = 'the truth'\nconst ANSWER_STR_LIE = 'a lie'\n\nfunction shuffle(array){\n\n    var currentIndex = array.length\n      , temporaryValue\n      , randomIndex\n      ;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n    return array\n}\n\nclass Room extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            players: [],\n            current_card: {},\n            stage: 0,\n            liar: \"\",\n            current_player: 0,\n            name: window.location.pathname.substring(19),\n            vote_result: \"\",\n            voted: false,\n            true_deck: [],\n            lie_deck: [],\n            votes: {true_count: 0, lie_count:0},\n            turn_count: 0,\n            end_condition_count: 0,\n            round_count: 1,\n            info: {true_count: 0, lie_count:0},\n            answers: [\"\"],\n            current_votes: {\"_\":\"\"},\n            current_vote: \"\",\n        }\n        this.startGame = this.startGame.bind(this)\n        this.updateVoteTruth = this.updateVoteTruth.bind(this)\n        this.updateVoteLie = this.updateVoteLie.bind(this)\n        this.restartGame = this.restartGame.bind(this)\n        this.audio = new Audio('https://www.myinstants.com/media/sounds/ding-1.mp3')\n        this.audio.volume = 0.4\n    }\n\n    isViewingMode() {\n        return this.state.name === '_'\n    }\n\n    startGame(){\n        const id = window.location.pathname.substring(6, 13)\n        let game = firebase.database().ref('games').child(id)\n        let cards = game.child('cards')\n        cards.child('true_deck').get().then((data)=>{\n            let new_card_deck = data.val()\n            let new_card = new_card_deck.shift()\n            game.update({\n                'votes': {true_count: 0, lie_count:0},\n                'current_card': {name: new_card[0], val: new_card[1]},\n                'stage': 1,\n                'cards': {\n                    true_deck: new_card_deck,\n                    lie_deck: []\n                },\n                'turn_count': 0,\n                'end_condition_count': 0,\n                'round_count': 1,\n                'info': {true_count: TRUTH_CARD_TOTAL_COUNT, lie_count: LIE_CARD_TOTAL_COUNT},\n                'answers': [\"\"],\n                'current_votes': {\"_\":\"\"}\n            })\n        })\n\n\n    }\n\n    updateVoteTruth(){\n        const id = window.location.pathname.substring(6, 13)\n        let game = firebase.database().ref('games').child(id)\n\n        game.child('votes').get().then((data)=>{\n            let votes = data.val()\n            votes.true_count += 1\n\n            game.update({'votes': votes})\n            this.setState({\n                voted: true,\n                current_vote: \"honest\"\n            })\n        })\n        game.child('current_votes').get().then((cv)=>{\n            let new_current_votes = {\"_\":\"\"}\n            if(Object.keys(cv.val()).length <= 3){\n                new_current_votes = cv.val()\n            }\n            new_current_votes[this.state.name] = \"honest\"\n            game.update({current_votes: new_current_votes})\n        })\n\n    }\n\n    updateVoteLie(){\n        const id = window.location.pathname.substring(6, 13)\n        let game = firebase.database().ref('games').child(id)\n        game.child('votes').get().then((data)=>{\n            let votes = data.val()\n            votes.lie_count += 1\n            game.update({'votes': votes})\n            this.setState({\n                voted: true,\n                current_vote: \"dishonest\"\n            })\n        })\n        game.child('current_votes').get().then((cv)=>{\n            let new_current_votes = {\"_\":\"\"}\n            if(Object.keys(cv.val()).length <= 3){\n                new_current_votes = cv.val()\n            }\n            new_current_votes[this.state.name] = \"dishonest\"\n            game.update({current_votes: new_current_votes})\n        })\n    }\n\n    restartGame(){\n        const id = window.location.pathname.substring(6, 13)\n        let game = firebase.database().ref('games').child(id)\n        game.update({\n            stage: 0\n        })\n    }\n\n    // Based off https://css-tricks.com/building-a-real-time-chat-app-with-react-and-firebase/\n    async componentDidMount() {\n        const id = window.location.pathname.substring(6, 13)\n        let game = firebase.database().ref('games').child(id)\n        const players = game.child('players')\n        players.on('child_added', player => {\n            let updatedPlayers = this.state.players\n            updatedPlayers.push(player.val())\n            updatedPlayers.sort()\n            this.setState({\n                players: updatedPlayers\n            })\n        });\n        const stage = game.child('stage')\n        stage.on('value', stage => {\n            this.setState({\n                stage: stage.val()\n            })\n            if (stage.val() === 0) {\n                // Determine questions for current round\n                let new_questions = shuffle(all_questions)\n                let true_deck = []\n                for (let i = 0; i < TRUTH_CARD_TOTAL_COUNT + LIE_CARD_TOTAL_COUNT; i++){\n                    if(i < TRUTH_CARD_TOTAL_COUNT){\n                        true_deck.push([new_questions[i], true])\n                    }\n                    else{\n                        true_deck.push([new_questions[i], false])\n                    }\n                }\n                let selected_questions = {\n                    true_deck: true_deck\n                }\n                game.update({ 'cards': selected_questions })\n                // Determine liar for current round\n                let liar = this.state.players[Math.floor(Math.random() * this.state.players.length)]\n                game.update({ 'liar': liar })\n            }\n        })\n        const c = game.child('cards')\n        c.on('value', c => {\n            this.setState({\n                true_deck: c.child('true_deck').val(),\n                lie_deck: c.child('lie_deck').val()\n            })\n        })\n        const liar = game.child('liar')\n        liar.on('value', liar => {\n            this.setState({\n                liar: liar.val()\n            })\n        })\n        game.child('current_player').on('value', cp =>{\n            this.setState({\n                current_player: cp.val()\n            })\n        })\n        game.child('current_card').on('value', card=>{\n            this.setState({\n                current_card: card.val()\n            })\n        })\n        game.child('vote_result').on('value', vr=>{\n            this.setState({\n                vote_result: vr.val()\n            })\n        })\n        game.child('turn_count').on('value', tc=>{\n            this.setState({\n                turn_count: tc.val()\n            })\n        })\n        game.child('end_condition_count').on('value', ecc=>{\n            this.setState({\n                end_condition_count: ecc.val()\n            })\n        })\n        game.child('round_count').on('value', rc=>{\n            this.setState({\n                round_count: rc.val()\n            })\n        })\n        game.child('info').on('value', info=>{\n            this.setState({\n                info: info.val()\n            })\n        })\n        game.child('answers').on('value', an=>{\n            this.setState({\n                answers: an.val()\n            })\n        })\n        game.child('current_votes').on('value', cv=>{\n            this.setState({\n                current_votes: cv.val()\n            })\n        })\n        const votes = game.child('votes')\n        votes.on('value', votes => {\n            if(votes.val().lie_count + votes.val().true_count === this.state.players.length - 1){\n                // let true_count = 0\n                // let lie_count = 0\n                // for(let j = 0; j < votes.val().length; j++){\n                //     if (votes.val()[j] === true){\n                //         true_count += 1\n                //     }\n                //     else{\n                //         lie_count += 1\n                //     }\n                // }\n                game.child('cards').get().then((cards)=>{\n                    let new_true_deck = cards.val().true_deck\n                    let new_lie_deck = cards.val().lie_deck\n                    if(new_lie_deck == null){\n                        new_lie_deck = []\n                    }\n                    let result = \"\"\n                    let new_end_condition_count = this.state.end_condition_count\n                    let new_round_count = this.state.round_count\n                    let new_turn_count = this.state.turn_count + 1\n                    let new_info = this.state.info\n                    let new_answers = this.state.answers\n                    if(votes.val().lie_count > votes.val().true_count){\n                        new_lie_deck.push([this.state.current_card.name, this.state.current_card.val])\n                        result = \"lie deck\"\n                        new_end_condition_count = 0\n                        new_answers.push([this.state.players[this.state.current_player], this.state.current_card.name, ANSWER_STR_LIE])\n                    }\n                    else{\n                        new_true_deck.push([this.state.current_card.name, this.state.current_card.val])\n                        result = \"truth deck\"\n                        new_end_condition_count += 1\n                        new_answers.push([this.state.players[this.state.current_player], this.state.current_card.name, ANSWER_STR_TRUTH])\n                    }\n\n                    //check for game ending condition...\n                    if(new_turn_count >= GAME_END_TURN_COUNT || new_lie_deck.length === LIE_DECK_END_COUNT){\n                        let end_info = {true_count:0, lie_count:0}\n                        let end_true_count = 0\n                        let end_lie_count = 0\n                        for(let u = 0; u < this.state.true_deck.length; u++){\n                            if(new_true_deck[u][1] === true){\n                                    end_true_count += 1\n                                }\n                                else{\n                                    end_lie_count += 1\n                                }\n                        }\n                        end_info = {true_count: end_true_count, lie_count: end_lie_count}\n                        game.update({\n                            'stage': 2,\n                            'cards': {\n                                true_deck: new_true_deck,\n                                lie_deck: new_lie_deck\n                            },\n                            'vote_result': result,\n                            'info': end_info,\n                            'answers': new_answers\n                        })\n                        this.setState({\n                            voted: false\n                        })\n                    }\n                    else{\n                        let current_player = this.state.current_player + 1\n                        if (current_player === this.state.players.length){\n                            current_player = 0\n                        }\n                        if(new_turn_count % this.state.players.length === 0){\n                            let t = 0\n                            let l = 0\n                            for(let k = 0; k < new_true_deck.length; k++){\n                                if(new_true_deck[k][1] === true){\n                                    t += 1\n                                }\n                                else{\n                                    l += 1\n                                }\n                            }\n                            new_info = {true_count: t, lie_count: l}\n                            new_round_count += 1\n                        }\n                        let new_card = new_true_deck.shift()\n                        game.update({\n                            'votes': {true_count: 0, lie_count:0},\n                            'current_player': current_player,\n                            'current_card': {name: new_card[0], val:new_card[1]},\n                            'cards': {\n                                true_deck: new_true_deck,\n                                lie_deck: new_lie_deck\n                            },\n                            'vote_result': result,\n                            'end_condition_count': new_end_condition_count,\n                            'round_count': new_round_count,\n                            'turn_count': new_turn_count,\n                            'info': new_info,\n                            'answers': new_answers\n                        })\n                        this.setState({\n                            voted: false\n                        })\n                        // Signify next turn!\n                        this.audio.play()\n                    }\n                })\n\n            }\n            else{\n                // if(this.state.voted === true){\n                //     game.child('current_votes').get().then((current_v) => {\n                //         let new_current_votes = current_v.val()\n                //         if(new_current_votes.length === this.state.players.length - 1){\n                //             new_current_votes = {}\n                //         }\n                //         new_current_votes[this.state.name] = this.state.current_vote\n                //         game.update({current_votes: new_current_votes})\n                //     })\n                // }\n\n                this.setState({\n                    votes: votes.val()\n                })\n            }\n        })\n    }\n\n    renderPlayerList() {\n        const answeringPlayer = this.state.players[this.state.current_player]\n\n        return (\n            <>\n                <p className='playersLabel'>\n                    Players:\n                </p>\n                <div className='playersList'>\n                    {this.state.players.map((player) => {\n                        return (\n                            <li key={player}>\n                                <div className={player === answeringPlayer ? 'currentPlayer' : undefined} >\n                                    {player}\n                                </div>\n                            </li>\n                        )\n                    }\n                    )}\n                </div>\n            </>\n        )\n    }\n\n    renderWaitingRoom() {\n        const hasEnoughPlayers = this.state.players.length >= MIN_NUMBER_PLAYERS\n        const roomCode = window.location.pathname.substring(6, 13)\n        const url = window.location.origin + '/enter/' + roomCode\n        return (\n            <div className='waiting'>\n                <p className='linkLabel'>send your friends this link:</p>\n                <p><a href={url} target=\"_blank\" className='link' rel=\"noreferrer\">{url}</a></p>\n                {hasEnoughPlayers && <button className='block' onClick={this.startGame} style={{margin: 'auto'}}>start</button>}\n                {!hasEnoughPlayers && <p>{MIN_NUMBER_PLAYERS - this.state.players.length} more players needed to start!</p>}\n            </div>\n        )\n    }\n\n    renderEndPage() {\n        const end_info = this.state.info\n        const truthTellersAutoWin = end_info.lie_count === 0\n        if (truthTellersAutoWin) {\n            const audio = new Audio('https://www.myinstants.com/media/sounds/139-item-catch.mp3')\n            audio.volume = 0.1\n            audio.play()\n        }\n        return (\n            <div className='endPage'>\n                <div className='liarLabel'>\n                    {truthTellersAutoWin && <>None of the lies were voted as truths! <br/><br/>\n                    Saints win, and the loser is {this.state.liar} (the Devil!)\n                    <br/><br/>\n                    {/* <button className='block' onClick={this.restartGame}>play again</button> */}\n                    </>}\n                    {!truthTellersAutoWin && <div>\n                        <br/>\n                        Uh-oh, {end_info.lie_count} lies were voted as truths!\n                        <br/>\n                        Your final saving grace: discuss and vote (over zoom / in-person) who you think the Devil is.\n                        <br/>\n                        <br/>\n                        {this.renderFinalVotesByAnswer()}\n                        <details>\n                            <summary><strong><u>Toggle to show the Devil</u> (don't click until everyone has voted!)</strong></summary>\n                            <br/>\n                            {this.state.liar} is the Devil!\n                            <br/><br/>\n                            If the majority voted correctly, the Saints win!\n                            Otherwise, {this.state.liar} (the Devil) wins!\n                            <br/><br/>\n                            {/* <button className='block' onClick={this.restartGame}>play again</button> */}\n                        </details>\n                    </div>}\n                </div>\n            </div>\n        )\n    }\n\n    renderVotingLog() {\n        const votes = this.state.answers?.slice(1).reverse()\n        if (votes.length > 0)  {\n            return (\n                <div className='votingLog'>\n                    <details open>\n                        <summary className='playersLabel'>Voting log:</summary>\n                        {votes.map((val, i) => {\n                            const questionNum = votes.length - i\n                            const answerer = val[0]\n                            const result = val[2]\n                            return (\n                                <li key={i + 1}>\n                                    Q{questionNum} by {answerer} was voted as <b>{result}</b>\n                                </li>\n                            )\n                        })}\n                    </details>\n                </div>\n            )\n        }\n\n        return <></>\n    }\n\n    renderFinalVotesByAnswer() {\n        const votes = this.state.answers?.slice(1)\n        const lies = []\n        const truths = []\n\n        votes.forEach((val, i) => {\n            const answerer = val[0]\n            const question = val[1]\n            const result = val[2]\n            const elem = (\n                <li key={i + 1}>\n                    {answerer}'s answer to '{question}'\n                </li>\n            )\n\n            if (result === ANSWER_STR_TRUTH) {\n                truths.push(elem)\n            } else {\n                lies.push(elem)\n            }\n        })\n\n        return (\n            <details className=\"finalVotesTableToggle\" open>\n                <summary>Voting history log</summary>\n                <div className=\"finalVotesTable\">\n                    <div className=\"truths section\">\n                        <u>What the group voted as true</u>\n                        {truths}\n                    </div>\n                    <div className=\"lies section\">\n                        <u>What the group voted as a lie</u>\n                        {lies}\n                    </div>\n                </div>\n            </details>\n        )\n    }\n\n    renderPlayerIdentity() {\n        if (this.isViewingMode()) return <></>\n        const currentPlayerIsLiar = this.state.name === this.state.liar\n\n        if (currentPlayerIsLiar) {\n            return (\n                <details className='playerIdentity linkLabel'>\n                    <summary>You are the <u>Devil</u>.</summary><br/>\n                    You must always lie when it is your turn to answer questions.\n                    Try to trick the other players into thinking you are telling the truth,\n                    without being detected as the Devil.\n                </details>\n            )\n        }\n\n        return (\n            <details className='playerIdentity linkLabel'>\n                <summary>You are a <u>Saint</u>.</summary><br/>\n                You are trying to detect when other people are lying,\n                and figure out who is the Devil. If God's will is for you to lie, try to make it obvious\n                so your fellow saints can detect it!\n            </details>\n        )\n    }\n\n    renderCurrentQuestion() {\n        const answeringPlayer = this.state.players[this.state.current_player]\n        const currentQuestion = this.state.current_card.name\n        const currentPlayer = this.state.name\n        const currentPlayerIsLiar = this.state.name === this.state.liar\n\n        return (\n            <div>\n                <p className='promptLabel'>Question {this.state.turn_count + 1} / {GAME_END_TURN_COUNT}</p>\n                {currentPlayer !== answeringPlayer ? (\n                    <p className='promptLabel'>{answeringPlayer} is answering the question '{currentQuestion}'</p>\n                    ) : (\n                    <>\n                        <p className='promptLabel'>It's your turn to answer this question: <br/> {currentQuestion}</p>\n                        <p className='promptLabel'>\n                            God's will is for you to tell <span className='hl'>{this.state.current_card.val ? 'the truth' : 'a lie'}</span>.\n                            As a <span className='hl'>{currentPlayerIsLiar ? 'Devil' : 'Saint'}</span>,\n                            you must <span className='hl'>{currentPlayerIsLiar ? 'lie' : this.state.current_card.val ? 'tell the truth' : 'lie'}</span>.\n                        </p>\n\n                    </>\n                    )\n                }\n            </div>\n        )\n    }\n\n    renderVotingSection() {\n        const answeringPlayer = this.state.players[this.state.current_player]\n        if (this.state.name === answeringPlayer) {\n            return (\n                <div className='votingSection'>\n                    Other players are currently voting on {this.isViewingMode() ? answeringPlayer + \"'s\": 'your'} ~ honesty ~ 😌😌😌\n                </div>\n            )\n        }\n\n        if (this.state.voted) {\n            return (\n                <div className='votingSection'>\n                    You have voted!\n                </div>\n            )\n        }\n\n        return (\n            <div className='votingSection'>\n                <p className='promptLabel hl'>Do you think {answeringPlayer} was telling the truth or lying?</p>\n\n                <div className='votingOptions'>\n                    <button className='block' onClick={this.updateVoteTruth}>Telling the truth</button>\n                    <button className='block' onClick={this.updateVoteLie}>Lying</button>\n                </div>\n            </div>\n        )\n    }\n\n    renderPlayersHaveVotedSection() {\n        if (!this.state.current_votes) { return <></> }\n        return (\n            <div>\n                {Object.keys(this.state.current_votes).map((key, ind) => {\n                    if(key === \"_\"){\n                        return <></>\n                    }\n                    return (\n                        <div className=\"linkLabel\" key={ind}>\n                            {key} voted {this.state.current_votes[key]}!\n                        </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n\n    renderRemainingLieVotes() {\n        return (\n            <div className='linkLabel'>\n                The group can vote {LIE_DECK_END_COUNT - (this.state.lie_deck?.length || 0)} more answers as lies.\n            </div>\n        )\n    }\n\n    renderAdminSection(){\n        return (\n            <details className='adminVotingSection'>\n                <summary className='linkLabel'>Is voting broken? toggle me! ;)</summary>\n\n                <div className='votingOptions'>\n                    <button className='block' onClick={this.updateVoteTruth}>Add a truth vote</button>\n                    <button className='block' onClick={this.updateVoteLie}>Add a lie vote</button>\n                </div>\n            </details>\n            )\n    }\n\n    renderMainGamePage() {\n        if (this.isViewingMode()) {\n            return (\n                <div>\n                    {this.renderCurrentQuestion()}\n                    {this.renderRemainingLieVotes()}\n                    {this.renderPlayersHaveVotedSection()}\n                    {this.renderAdminSection()}\n                </div>\n            )\n        }\n        return (\n            <div>\n                {this.renderPlayerIdentity()}\n                {this.renderCurrentQuestion()}\n                {this.renderVotingSection()}\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className='gameScreen'>\n                <div className='gameScreenLeft'>\n                    {this.renderPlayerList()}\n                    {this.state.stage === 1 && this.renderVotingLog()}\n                </div>\n                <div className='gameScreenRight'>\n                    {this.state.stage === 0 && this.renderWaitingRoom()}\n                    {this.state.stage === 1 && this.renderMainGamePage()}\n                    {this.state.stage === 2 && this.renderEndPage()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Room;\n","import React, { Component } from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\nimport Home from './components/Home'\nimport Instructions from './components/Instructions'\nimport Acknowledgements from './components/Acknowledgements'\nimport EnterUsername from './components/Enter-username'\nimport Room from './components/Room'\nimport './components/Components.css'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" render={ props => <Home {...props} />} />\n        <Route exact path=\"/instructions\" render={ props => <Instructions {...props} />} />\n        <Route exact path=\"/acknowledgements\" render={ props => <Acknowledgements {...props} />} />\n        <Route exact path=\"/enter\" render={ props => <EnterUsername {...props} />} />\n        <Route exact path=\"/enter/:id\" render={ props => <EnterUsername {...props} />} />\n        <Route exact path=\"/room/:id\" render={ props => <Room {...props} />} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}